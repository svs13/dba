Подключение к базе данных через консоль:
========================================
### MySQL
    mysql --user=root --password=
    mysql> use dba1
### PostgreSQL
    psql -U postgres
    postgres=# \c dba1
### SQLite
Консоль не работает, не находит sqlite3.exe
скачал с https://www.sqlite.org/download.html sqlite-tools-win32-x86-3240000.zip
в нём sqlite3.exe скопировал в c:\openserver\ospanel\ 
    sqlite3 c:/openserver/dba1.sqlite
    sqlite> .help

Документация
============
    https://dev.mysql.com/doc/refman/5.7/en/data-types.html
    http://www.postgresql.org/docs/9.6/interactive/datatype.html
    https://www.sqlite.org/datatype3.html
    http://www.mysql.ru/docs/man/Column_types.html
    http://postgresql.ru.net/manual/datatype.html
    http://xbb.uz/db/Tipy-dannyh-v-SQLite-versii-3
    
Типы данных
===========
+-----------------------+------------------------+-------+
|MySQL                  |PostgreSQL              |SQLite |
+-----------------------+------------------------+-------+
|                       |                        | NULL  |
+-----------------------+------------------------+-------+
|TINYINT[(M)]           |pg_lsn                  |       |
|SMALLINT[(M)]          |smallint                |       |
|MEDIUMINT[(M)]         |integer                 |INTEGER|
|INT[(M)]               |bigint                  |       |
|INTEGER[(M)]           |smallserial             |       |
|BIGINT[(M)]            |serial                  |       |
|                       |bigserial               |       |
+-----------------------+------------------------+-------+
|FLOAT(точность)        |                        |       |
|FLOAT[(M,D)]           |                        |       |
|DOUBLE[(M,D)]          |                        |       |
|DOUBLE PRECISION[(M,D)]|double precision        |       |
|REAL- тоже что и DOUBLE|real                    | REAL  |
+-----------------------+------------------------+       |
|DECIMAL[(M[,D])]       |numeric [ (p, s) ]      |       |
|DEC NUMERIC = DECIMAL  |money                   |       |
+-----------------------+------------------------+-------+
|DATE                   |date                    |       |
|DATETIME               |time [(p)] [without time|       |
|TIMESTAMP[(M)]         |time [(p)] with time zon|       |
|TIME                   |timestamp [(p)] [without|       |
|YEAR[(2|4)]            |timestamp [(p)] with tim|       |
|                       |interval [fields] [(p)] |       |
+-----------------------+------------------------+       |
|BIT,BOOL (TINYINT(1))  |bit [ (n) ]             |       |
|                       |bit varying [ (n) ]     |       |
|                       |boolean                 |       |
+-----------------------+------------------------+       |
|[NAT] CHAR(M) [BIN]    |xml                     |       |
|CHAR                   |tsquery,tsvector        |       |
|[NAT] VARCHAR(M) [BIN] |character [ (n) ]       |       |
|TINYBLOB               |character varying [(n)] |       |
|TINYTEXT               |bytea                   |       |
|BLOB                   |box                     | BLOB  |
|TEXT                   |text                    | TEXT  |
|LONGBLOB               |json,jsonb              |       |
|LONGTEXT               |cidr,inet,macaddr       |       |
|ENUM('зн1','зн2',...)  |circle,line,lseg,path,  |       |
|SET('зн1','зн2',...)   |point,polygon           |       |
|                       |txid_snapshot           |       |
|                       |uuid                    |       |
+-----------------------+------------------------+-------+

Исследование SERIAL
===================

### MySQL
    CREATE TABLE `serial` (`id` SERIAL, `text` TEXT);
    EXPLAIN `serial`;
+-------+---------------------+------+-----+---------+----------------+
| Field | Type                | Null | Key | Default | Extra          |
+-------+---------------------+------+-----+---------+----------------+
| id    | bigint(20) unsigned | NO   | PRI | NULL    | auto_increment |
| text  | text                | YES  |     | NULL    |                |
+-------+---------------------+------+-----+---------+----------------+

из документации: тип SERIAL - это alias/псевдоним,  соответствует типу BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE
т.е. это тип:
- без знака
- от 1 до 18446744073709551615
- с каждой новой записью увеличивается на единицу
- уникальное, т.е. в данном столбце значения полей не должны повторяться.
Поведение типа SERIAL в БД:
- при явном задании значения - записывает в базу то что задал
- если поле не задано, то инкремент наибольшего значения
- при задании 0 - аналогично если не заданному полю
- если отриц. число - ошибка.
- если совпадает с каким-то полем - ошибка
- если выходит за верхний диапазон - ОШИБКА.
- если удалить последнюю запись со значением поля '20' и добавить новую, 
то значение всё равно увеличится на 1, т.е. станет '21', а не '20'
- верхний предел 2^64-1 = 18446744073709551615
- нижний предел 1


### PostgreSQL
    CREATE TABLE "serial" ("id" SERIAL, "text" TEXT);
    SELECT column_name, data_type, column_default, is_nullable FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = 'serial' AND column_name = 'id';

 column_name | data_type |           column_default           | is_nullable
-------------+-----------+------------------------------------+-------------
 id          | integer   | nextval('serial_id_seq'::regclass) | NO    

из документации: тип SERIAL - это числовой тип: serial    4 bytes    autoincrementing integer    1 to 2147483647
т.е. это тип:
- без знака
- от 1 до 2147483647
- с каждой новой записью увеличивается на единицу
- занимает 4 bytes
Поведение типа SERIAL в БД:
- при явном задании значения - записывает в базу то что задал
- если поле не задано, то инкремент. Инкремент НЕ ЗАВИСИТ от вручную заданных значений!!! Он живёт своей жизнью!!!
- при задании 0 - ошибок НЕТ. значение поля станет 0
- если отриц. число '-100' - ошибок НЕТ. значение поля станет '-100'
- если совпадает с каким-то полем - ошибок НЕТ.
- если выходит за верхний диапазон - ОШИБКА.
- если удалить последнюю запись со значением поля '20' (автоинкрементом было задано) и добавить новую, 
то значение всё равно увеличится на 1, т.е. станет '21', а не '20'
- верхний предел 2^31-1 = 2147483647
- нижний предел -2^31 = -2147483648


### SQLite
    CREATE TABLE `serial` (`id` SERIAL, `text` TEXT);
    pragma table_info(serial);
    0|id|SERIAL|0||0
    1|text|TEXT|0||0
Очень интересно. В ответе пишет SERIAL. И DataGrip тоже пишет type-SERIAL.
    SELECT `id`, typeof(`id`), `text`, typeof(`text`) FROM `serial`;
    |null|1|text
    |null|2|text
    |null|3|text
    |null|5|text
    1|integer|2|text
    1|integer|2|text
    -1|integer|2|text
    aaa|text|2|text
    4.56546546546547e+36|real|2|text
    1.23456789012346e+28|real|2|text
Типа SERIAL не существует.
    CREATE TABLE `serial` (`id` INTEGER PRIMARY KEY, `text` TEXT);
    0|id|INTEGER|0||1
    1|text|TEXT|0||0
чтобы реализовать автоинкремент достаточно задать INTEGER PRIMARY KEY
Поведение типа INTEGER PRIMARY KEY в БД:
- при явном задании значения - записывает в базу то что задал
- если поле не задано, то инкремент наибольшего значения
- при задании 0 - ошибок НЕТ. значение поля станет 0
- если отриц. число '-100' - ошибок НЕТ. значение поля станет '-100'
- если совпадает с каким-то полем - ОШИБКА.
- если выходит за верхний диапазон - ОШИБКА.
- если удалить последнюю запись со значением поля '20' (автоинкрементом было задано) и добавить новую, 
то значение НЕ УВЕЛИЧИТСЯ на 1, т.е. станет '20', а не '21'
- верхний предел 2^63-1 = 9223372036854775807
- нижний предел -2^63 = -9223372036854775808

